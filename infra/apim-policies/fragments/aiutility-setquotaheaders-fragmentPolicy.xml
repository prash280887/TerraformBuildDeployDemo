<fragment>
  <choose>
    <when condition="@(context.Variables.GetValueOrDefault<JObject>("aiutility-config", null) != null)">
      <set-header name="RateLimit-Limit" exists-action="override">
        <value>@{
          JObject userQuota = (JObject)context.Variables["aiutility-quota"];
          return userQuota["tokenQuotaPerPeriod"].ToObject<int>().ToString();
        }</value>
        </set-header>
        <set-header name="RateLimit-Remaining" exists-action="override">
          <value>@{
          JObject userQuota = (JObject)context.Variables["aiutility-quota"];
          int remaining = (int)userQuota["tokensLeftInPeriod"] - (int)context.Variables.GetValueOrDefault("aiutility-consumedtotaltokens", 0);
          remaining = remaining > 0 ? remaining : 0;
          return remaining.ToString();
        }</value>
        </set-header>
        <set-header name="x-aiutility-ratelimit-limit" exists-action="override">
          <value>@{
          JObject userQuota = (JObject)context.Variables["aiutility-quota"];
          return userQuota["tokenQuotaPerPeriod"].ToObject<int>().ToString();
        }</value>
          </set-header>
          <set-header name="x-aiutility-ratelimit" exists-action="override">
            <value>@{
          JObject userQuota = (JObject)context.Variables["aiutility-quota"];
          int remaining = (int)userQuota["tokensLeftInPeriod"] - (int)context.Variables.GetValueOrDefault("aiutility-consumedtotaltokens", 0);
          remaining = remaining > 0 ? remaining : 0;
          return remaining.ToString();
        }</value>
          </set-header>
        </when>
      </choose>
    </fragment>
