<!-- Depends on variable 'aiutility-quota' -->
<!-- Returns 'never' if quota reached -->
<fragment>
  <choose>
    <when condition="@(context.Variables.GetValueOrDefault<JObject>("aiutility-quota") == null)">
      <return-response>
        <set-status code="503" reason="Service Unavailable" />
        <set-header name="content-type" exists-action="override">
          <value>application/json</value>
        </set-header>
        <set-body>@{
          return new JObject(
              new JProperty("error",
                   new JObject(
                      new JProperty("code", "503"),
                      new JProperty("message", $"Quota service unavailable"),
                      new JProperty("source", "aiutility")
                   )
              )
          ).ToString();
        }</set-body>
      </return-response>
    </when>
    <when condition="@(((int)((JObject)context.Variables["aiutility-quota"])["tokensLeftInPeriod"]) > 0 || ((int)((JObject)context.Variables["aiutility-quota"])["tokenQuotaPerPeriod"]) == -1)">
      <authentication-managed-identity resource="https://cognitiveservices.azure.com" output-token-variable-name="msi-access-token" ignore-error="false" />
      <set-header name="api-key" exists-action="delete" />
      <set-header name="Authorization" exists-action="override">
        <value>@("Bearer " + (string)context.Variables["msi-access-token"])</value>
      </set-header>
      <set-backend-service base-url="@(((JObject)context.Variables["aiutility-config"])["endpoint"].ToString())" />
    </when>
    <otherwise>
      <return-response>
        <set-status code="429" reason="Too Many Requests" />
        <set-header name="content-type" exists-action="override">
          <value>application/json</value>
        </set-header>
        <set-header name="RateLimit-Limit" exists-action="override">
          <value>@{
                  JObject userQuota = (JObject)context.Variables["aiutility-quota"];
                  return userQuota["tokenQuotaPerPeriod"].ToObject<long>().ToString();
                }</value>
          </set-header>
          <set-header name="RateLimit-Remaining" exists-action="override">
            <value>0</value>
          </set-header>
          <set-header name="x-aiutility-ratelimit-limit" exists-action="override">
            <value>@{
                  JObject userQuota = (JObject)context.Variables["aiutility-quota"];
                  return userQuota["tokenQuotaPerPeriod"].ToObject<long>().ToString();
                }</value>
            </set-header>
            <set-header name="x-aiutility-ratelimit" exists-action="override">
              <value>0</value>
            </set-header>
            <set-body>@{
          JObject userQuota = (JObject)context.Variables["aiutility-quota"];
          var minutesLeftBeforeRenewal = userQuota["minutesLeftBeforeRenewal"];
          return new JObject(
              new JProperty("error",
                   new JObject(
                      new JProperty("code", "429"),
                      new JProperty("message", $"This subscription has reached its quota. Please retry later in {minutesLeftBeforeRenewal} minutes"),
                      new JProperty("source", "aiutility")
                  )
              )
          ).ToString();
        }</set-body>
          </return-response>
        </otherwise>
      </choose>
    </fragment>
